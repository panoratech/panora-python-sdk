"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .accounting_account import AccountingAccount
from .accounting_address import AccountingAddress
from .accounting_attachment import AccountingAttachment
from .accounting_balancesheet import AccountingBalancesheet
from .accounting_cashflowstatement import AccountingCashflowstatement
from .accounting_companyinfo import AccountingCompanyinfo
from .accounting_contact import AccountingContact
from .accounting_creditnote import AccountingCreditnote
from .accounting_expense import AccountingExpense
from .accounting_incomestatement import AccountingIncomestatement
from .accounting_invoice import AccountingInvoice
from .accounting_item import AccountingItem
from .accounting_journalentry import AccountingJournalentry
from .accounting_payment import AccountingPayment
from .accounting_phonenumber import AccountingPhonenumber
from .accounting_purchaseorder import AccountingPurchaseorder
from .accounting_taxrate import AccountingTaxrate
from .accounting_trackingcategory import AccountingTrackingcategory
from .accounting_transaction import AccountingTransaction
from .accounting_vendorcredit import AccountingVendorcredit
from .ats_activity import AtsActivity
from .ats_application import AtsApplication
from .ats_attachment import AtsAttachment
from .ats_candidate import AtsCandidate
from .ats_department import AtsDepartment
from .ats_eeocs import AtsEeocs
from .ats_interview import AtsInterview
from .ats_job import AtsJob
from .ats_jobinterviewstage import AtsJobinterviewstage
from .ats_offer import AtsOffer
from .ats_office import AtsOffice
from .ats_rejectreason import AtsRejectreason
from .ats_scorecard import AtsScorecard
from .ats_screeningquestion import AtsScreeningquestion
from .ats_tag import AtsTag
from .ats_user import AtsUser
from .auth import Auth
from .connections import Connections
from .connections_strategies import ConnectionsStrategies
from .crm_companies import CrmCompanies
from .crm_contacts import CrmContacts
from .crm_deals import CrmDeals
from .crm_engagements import CrmEngagements
from .crm_notes import CrmNotes
from .crm_stages import CrmStages
from .crm_tasks import CrmTasks
from .crm_users import CrmUsers
from .events import Events
from .field_mappings import FieldMappings
from .filestorage_drive import FilestorageDrive
from .filestorage_file import FilestorageFile
from .filestorage_folder import FilestorageFolder
from .filestorage_permission import FilestoragePermission
from .filestorage_sharedlink import FilestorageSharedlink
from .hris_bankinfo import HrisBankinfo
from .hris_benefit import HrisBenefit
from .hris_company import HrisCompany
from .hris_dependent import HrisDependent
from .hris_employee import HrisEmployee
from .hris_employeepayrollrun import HrisEmployeepayrollrun
from .hris_employerbenefit import HrisEmployerbenefit
from .hris_employment import HrisEmployment
from .hris_group import HrisGroup
from .hris_location import HrisLocation
from .hris_paygroup import HrisPaygroup
from .hris_payrollrun import HrisPayrollrun
from .hris_timeoff import HrisTimeoff
from .hris_timeoffbalance import HrisTimeoffbalance
from .linked_users import LinkedUsers
from .magic_links import MagicLinks
from .managed_webhooks import ManagedWebhooks
from .marketingautomation_action import MarketingautomationAction
from .marketingautomation_automation import MarketingautomationAutomation
from .marketingautomation_campaign import MarketingautomationCampaign
from .marketingautomation_contact import MarketingautomationContact
from .marketingautomation_email import MarketingautomationEmail
from .marketingautomation_event import MarketingautomationEvent
from .marketingautomation_list import MarketingautomationList
from .marketingautomation_message import MarketingautomationMessage
from .marketingautomation_template import MarketingautomationTemplate
from .marketingautomation_user import MarketingautomationUser
from .mw import Mw
from .organisations import Organisations
from .passthrough import Passthrough
from .project_connectors import ProjectConnectors
from .projects import Projects
from .sdkconfiguration import SDKConfiguration
from .syncs import Syncs
from .ticketing_accounts import TicketingAccounts
from .ticketing_attachments import TicketingAttachments
from .ticketing_collections import TicketingCollections
from .ticketing_comments import TicketingComments
from .ticketing_contacts import TicketingContacts
from .ticketing_tags import TicketingTags
from .ticketing_teams import TicketingTeams
from .ticketing_tickets import TicketingTickets
from .ticketing_users import TicketingUsers
from .utils.retries import RetryConfig
from .webhook import Webhook
from panora import utils
from panora._hooks import AfterErrorContext, AfterSuccessContext, BeforeRequestContext, HookContext, SDKHooks
from panora.models import components, errors, operations
from typing import Callable, Dict, Optional, Union

class Panora:
    r"""Unified Panora API: The Panora API description"""
    auth: Auth
    connections: Connections
    webhook: Webhook
    managed_webhooks: ManagedWebhooks
    mw: Mw
    ticketing_tickets: TicketingTickets
    ticketing_users: TicketingUsers
    ticketing_accounts: TicketingAccounts
    ticketing_contacts: TicketingContacts
    crm_companies: CrmCompanies
    crm_contacts: CrmContacts
    crm_deals: CrmDeals
    crm_engagements: CrmEngagements
    crm_notes: CrmNotes
    crm_stages: CrmStages
    crm_tasks: CrmTasks
    crm_users: CrmUsers
    ticketing_collections: TicketingCollections
    ticketing_comments: TicketingComments
    ticketing_tags: TicketingTags
    ticketing_teams: TicketingTeams
    linked_users: LinkedUsers
    organisations: Organisations
    projects: Projects
    field_mappings: FieldMappings
    events: Events
    magic_links: MagicLinks
    passthrough: Passthrough
    connections_strategies: ConnectionsStrategies
    syncs: Syncs
    project_connectors: ProjectConnectors
    hris_bankinfo: HrisBankinfo
    hris_benefit: HrisBenefit
    hris_company: HrisCompany
    hris_dependent: HrisDependent
    hris_employeepayrollrun: HrisEmployeepayrollrun
    hris_employee: HrisEmployee
    hris_employerbenefit: HrisEmployerbenefit
    hris_employment: HrisEmployment
    hris_group: HrisGroup
    hris_location: HrisLocation
    hris_paygroup: HrisPaygroup
    hris_payrollrun: HrisPayrollrun
    hris_timeoff: HrisTimeoff
    hris_timeoffbalance: HrisTimeoffbalance
    marketingautomation_action: MarketingautomationAction
    marketingautomation_automation: MarketingautomationAutomation
    marketingautomation_campaign: MarketingautomationCampaign
    marketingautomation_contact: MarketingautomationContact
    marketingautomation_email: MarketingautomationEmail
    marketingautomation_event: MarketingautomationEvent
    marketingautomation_list: MarketingautomationList
    marketingautomation_message: MarketingautomationMessage
    marketingautomation_template: MarketingautomationTemplate
    marketingautomation_user: MarketingautomationUser
    ats_activity: AtsActivity
    ats_application: AtsApplication
    ats_attachment: AtsAttachment
    ats_candidate: AtsCandidate
    ats_department: AtsDepartment
    ats_interview: AtsInterview
    ats_jobinterviewstage: AtsJobinterviewstage
    ats_job: AtsJob
    ats_offer: AtsOffer
    ats_office: AtsOffice
    ats_rejectreason: AtsRejectreason
    ats_scorecard: AtsScorecard
    ats_screeningquestion: AtsScreeningquestion
    ats_tag: AtsTag
    ats_user: AtsUser
    ats_eeocs: AtsEeocs
    accounting_account: AccountingAccount
    accounting_address: AccountingAddress
    accounting_attachment: AccountingAttachment
    accounting_balancesheet: AccountingBalancesheet
    accounting_cashflowstatement: AccountingCashflowstatement
    accounting_companyinfo: AccountingCompanyinfo
    accounting_contact: AccountingContact
    accounting_creditnote: AccountingCreditnote
    accounting_expense: AccountingExpense
    accounting_incomestatement: AccountingIncomestatement
    accounting_invoice: AccountingInvoice
    accounting_item: AccountingItem
    accounting_journalentry: AccountingJournalentry
    accounting_payment: AccountingPayment
    accounting_phonenumber: AccountingPhonenumber
    accounting_purchaseorder: AccountingPurchaseorder
    accounting_taxrate: AccountingTaxrate
    accounting_trackingcategory: AccountingTrackingcategory
    accounting_transaction: AccountingTransaction
    accounting_vendorcredit: AccountingVendorcredit
    filestorage_drive: FilestorageDrive
    filestorage_file: FilestorageFile
    filestorage_folder: FilestorageFolder
    filestorage_sharedlink: FilestorageSharedlink
    filestorage_permission: FilestoragePermission
    ticketing_attachments: TicketingAttachments

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 jwt: Union[Optional[str], Callable[[], Optional[str]]] = None,
                 server_idx: Optional[int] = None,
                 server_url: Optional[str] = None,
                 url_params: Optional[Dict[str, str]] = None,
                 client: Optional[requests_http.Session] = None,
                 retry_config: Optional[RetryConfig] = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param jwt: The jwt required for authentication
        :type jwt: Union[Optional[str], Callable[[], Optional[str]]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if callable(jwt):
            def security():
                return components.Security(jwt = jwt())
        else:
            security = components.Security(jwt = jwt)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        self.sdk_configuration = SDKConfiguration(
            client,
            security,
            server_url,
            server_idx,
            retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__['_hooks'] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.auth = Auth(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
        self.webhook = Webhook(self.sdk_configuration)
        self.managed_webhooks = ManagedWebhooks(self.sdk_configuration)
        self.mw = Mw(self.sdk_configuration)
        self.ticketing_tickets = TicketingTickets(self.sdk_configuration)
        self.ticketing_users = TicketingUsers(self.sdk_configuration)
        self.ticketing_accounts = TicketingAccounts(self.sdk_configuration)
        self.ticketing_contacts = TicketingContacts(self.sdk_configuration)
        self.crm_companies = CrmCompanies(self.sdk_configuration)
        self.crm_contacts = CrmContacts(self.sdk_configuration)
        self.crm_deals = CrmDeals(self.sdk_configuration)
        self.crm_engagements = CrmEngagements(self.sdk_configuration)
        self.crm_notes = CrmNotes(self.sdk_configuration)
        self.crm_stages = CrmStages(self.sdk_configuration)
        self.crm_tasks = CrmTasks(self.sdk_configuration)
        self.crm_users = CrmUsers(self.sdk_configuration)
        self.ticketing_collections = TicketingCollections(self.sdk_configuration)
        self.ticketing_comments = TicketingComments(self.sdk_configuration)
        self.ticketing_tags = TicketingTags(self.sdk_configuration)
        self.ticketing_teams = TicketingTeams(self.sdk_configuration)
        self.linked_users = LinkedUsers(self.sdk_configuration)
        self.organisations = Organisations(self.sdk_configuration)
        self.projects = Projects(self.sdk_configuration)
        self.field_mappings = FieldMappings(self.sdk_configuration)
        self.events = Events(self.sdk_configuration)
        self.magic_links = MagicLinks(self.sdk_configuration)
        self.passthrough = Passthrough(self.sdk_configuration)
        self.connections_strategies = ConnectionsStrategies(self.sdk_configuration)
        self.syncs = Syncs(self.sdk_configuration)
        self.project_connectors = ProjectConnectors(self.sdk_configuration)
        self.hris_bankinfo = HrisBankinfo(self.sdk_configuration)
        self.hris_benefit = HrisBenefit(self.sdk_configuration)
        self.hris_company = HrisCompany(self.sdk_configuration)
        self.hris_dependent = HrisDependent(self.sdk_configuration)
        self.hris_employeepayrollrun = HrisEmployeepayrollrun(self.sdk_configuration)
        self.hris_employee = HrisEmployee(self.sdk_configuration)
        self.hris_employerbenefit = HrisEmployerbenefit(self.sdk_configuration)
        self.hris_employment = HrisEmployment(self.sdk_configuration)
        self.hris_group = HrisGroup(self.sdk_configuration)
        self.hris_location = HrisLocation(self.sdk_configuration)
        self.hris_paygroup = HrisPaygroup(self.sdk_configuration)
        self.hris_payrollrun = HrisPayrollrun(self.sdk_configuration)
        self.hris_timeoff = HrisTimeoff(self.sdk_configuration)
        self.hris_timeoffbalance = HrisTimeoffbalance(self.sdk_configuration)
        self.marketingautomation_action = MarketingautomationAction(self.sdk_configuration)
        self.marketingautomation_automation = MarketingautomationAutomation(self.sdk_configuration)
        self.marketingautomation_campaign = MarketingautomationCampaign(self.sdk_configuration)
        self.marketingautomation_contact = MarketingautomationContact(self.sdk_configuration)
        self.marketingautomation_email = MarketingautomationEmail(self.sdk_configuration)
        self.marketingautomation_event = MarketingautomationEvent(self.sdk_configuration)
        self.marketingautomation_list = MarketingautomationList(self.sdk_configuration)
        self.marketingautomation_message = MarketingautomationMessage(self.sdk_configuration)
        self.marketingautomation_template = MarketingautomationTemplate(self.sdk_configuration)
        self.marketingautomation_user = MarketingautomationUser(self.sdk_configuration)
        self.ats_activity = AtsActivity(self.sdk_configuration)
        self.ats_application = AtsApplication(self.sdk_configuration)
        self.ats_attachment = AtsAttachment(self.sdk_configuration)
        self.ats_candidate = AtsCandidate(self.sdk_configuration)
        self.ats_department = AtsDepartment(self.sdk_configuration)
        self.ats_interview = AtsInterview(self.sdk_configuration)
        self.ats_jobinterviewstage = AtsJobinterviewstage(self.sdk_configuration)
        self.ats_job = AtsJob(self.sdk_configuration)
        self.ats_offer = AtsOffer(self.sdk_configuration)
        self.ats_office = AtsOffice(self.sdk_configuration)
        self.ats_rejectreason = AtsRejectreason(self.sdk_configuration)
        self.ats_scorecard = AtsScorecard(self.sdk_configuration)
        self.ats_screeningquestion = AtsScreeningquestion(self.sdk_configuration)
        self.ats_tag = AtsTag(self.sdk_configuration)
        self.ats_user = AtsUser(self.sdk_configuration)
        self.ats_eeocs = AtsEeocs(self.sdk_configuration)
        self.accounting_account = AccountingAccount(self.sdk_configuration)
        self.accounting_address = AccountingAddress(self.sdk_configuration)
        self.accounting_attachment = AccountingAttachment(self.sdk_configuration)
        self.accounting_balancesheet = AccountingBalancesheet(self.sdk_configuration)
        self.accounting_cashflowstatement = AccountingCashflowstatement(self.sdk_configuration)
        self.accounting_companyinfo = AccountingCompanyinfo(self.sdk_configuration)
        self.accounting_contact = AccountingContact(self.sdk_configuration)
        self.accounting_creditnote = AccountingCreditnote(self.sdk_configuration)
        self.accounting_expense = AccountingExpense(self.sdk_configuration)
        self.accounting_incomestatement = AccountingIncomestatement(self.sdk_configuration)
        self.accounting_invoice = AccountingInvoice(self.sdk_configuration)
        self.accounting_item = AccountingItem(self.sdk_configuration)
        self.accounting_journalentry = AccountingJournalentry(self.sdk_configuration)
        self.accounting_payment = AccountingPayment(self.sdk_configuration)
        self.accounting_phonenumber = AccountingPhonenumber(self.sdk_configuration)
        self.accounting_purchaseorder = AccountingPurchaseorder(self.sdk_configuration)
        self.accounting_taxrate = AccountingTaxrate(self.sdk_configuration)
        self.accounting_trackingcategory = AccountingTrackingcategory(self.sdk_configuration)
        self.accounting_transaction = AccountingTransaction(self.sdk_configuration)
        self.accounting_vendorcredit = AccountingVendorcredit(self.sdk_configuration)
        self.filestorage_drive = FilestorageDrive(self.sdk_configuration)
        self.filestorage_file = FilestorageFile(self.sdk_configuration)
        self.filestorage_folder = FilestorageFolder(self.sdk_configuration)
        self.filestorage_sharedlink = FilestorageSharedlink(self.sdk_configuration)
        self.filestorage_permission = FilestoragePermission(self.sdk_configuration)
        self.ticketing_attachments = TicketingAttachments(self.sdk_configuration)


    def get_hello(self) -> operations.GetHelloResponse:
        hook_ctx = HookContext(operation_id='getHello', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = client.prepare_request(requests_http.Request('GET', url, params=query_params, headers=headers))
            req = self.sdk_configuration.get_hooks().before_request(BeforeRequestContext(hook_ctx), req)
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), None, e)
            if e is not None:
                raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            result, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), http_res, None)
            if e is not None:
                raise e
            if result is not None:
                http_res = result
        else:
            http_res = self.sdk_configuration.get_hooks().after_success(AfterSuccessContext(hook_ctx), http_res)
            
        
        
        res = operations.GetHelloResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[str])
                res.string = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res



    def get_health(self) -> operations.GetHealthResponse:
        hook_ctx = HookContext(operation_id='getHealth', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/health'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = client.prepare_request(requests_http.Request('GET', url, params=query_params, headers=headers))
            req = self.sdk_configuration.get_hooks().before_request(BeforeRequestContext(hook_ctx), req)
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), None, e)
            if e is not None:
                raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            result, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), http_res, None)
            if e is not None:
                raise e
            if result is not None:
                http_res = result
        else:
            http_res = self.sdk_configuration.get_hooks().after_success(AfterSuccessContext(hook_ctx), http_res)
            
        
        
        res = operations.GetHealthResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[float])
                res.number = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res



    def get_hello_protected(self) -> operations.GetHelloProtectedResponse:
        hook_ctx = HookContext(operation_id='getHelloProtected', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/protected'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = client.prepare_request(requests_http.Request('GET', url, params=query_params, headers=headers))
            req = self.sdk_configuration.get_hooks().before_request(BeforeRequestContext(hook_ctx), req)
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), None, e)
            if e is not None:
                raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            result, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), http_res, None)
            if e is not None:
                raise e
            if result is not None:
                http_res = result
        else:
            http_res = self.sdk_configuration.get_hooks().after_success(AfterSuccessContext(hook_ctx), http_res)
            
        
        
        res = operations.GetHelloProtectedResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[str])
                res.string = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

